#!/usr/bin/perl
##
## This program is a part of Azucar software package (a SAT-based Constraint Solver).
## https://code.google.com/p/azucar-solver/
## (C) Tomoya Tanjo, Naoyuki Tamura and Mutsunori Banbara
##
use Getopt::Long;
use FileHandle;
use File::Basename;
use IPC::Open2;
# use strict;
$| = 1;

my $version = "v0.1.0";
my $java = "java";
my $jar = dirname($0)."/azucar-$version.jar";
my $solver0 = "minisat";
my $solver0_inc = "minisat-inc";
my $tmp = "/tmp/azucar$$";

my ($showversion, $help, $debug, $verbose, $veryverbose, $option);
my ($java_opt1, $java_opt2, $solver, $competition, $keep, $incremental, $prof);
my ($max_csp, $csp_file, $map_file, $sat_file, $out_file);
my ($memlimit, $timelimit, $solverlimit, $encoding, $base, $m, $enable_assert);
my $nopropagate;
my $found = 0;

&GetOptions(
	    'version' => \$showversion,
	    'h|help' => \$help,
	    'debug=i' => \$debug,
	    'v|verbose' => \$verbose,
	    'vv|veryverbose' => \$veryverbose,
	    'c|competition' => \$competition,
	    'i|incremental' => \$incremental,
	    'o|option=s' => \$option,
	    'max' => \$max_csp,
	    'tmp=s' => \$tmp,
	    'csp=s' => \$csp_file,
	    'map=s' => \$map_file,
	    'sat=s' => \$sat_file,
	    'out=s' => \$out_file,
	    'jar=s' => \$jar,
	    'java=s' => \$java,
	    'jopt1=s' => \$java_opt1,
	    'jopt2=s' => \$java_opt2,
	    'prof=s' => \$prof,
	    'solver=s' => \$solver,
	    'keep' => \$keep,
	    'memlimit=i' => \$memlimit,
	    'timelimit=i' => \$timelimit,
	    'encoding=s' => \$encoding,
	    'b=i' => \$base,
	    'm=i' => \$m,
	    'ea' => \$enable_assert,
	    'nopropagate' => \$nopropagate,
	    );
$verbose = $verbose || $veryverbose;
if (! $solver) {
    $solver = $incremental ? $solver0_inc : $solver0;
}
if (! $java_opt1) {
    if ($memlimit > 200) {
	$java_opt1 = sprintf("-Xmx%dM", $memlimit-200);
    }
}
if (! $java_opt2) {
    if ($incremental) {
	$java_opt2 = "-Xmx50M";
	$solverlimit = $memlimit-200-50 if $memlimit > 250;
    } else {
	if ($memlimit > 200) {
	    $java_opt2 = sprintf("-Xmx%dM", $memlimit-200);
	}
    }
}

if ($enable_assert) {
  $java_opt1 .= " -ea";
	$java_opt2 .= " -ea";
}

if (! $nopropagate) {
	$nopropagate = 0;
}

if ($showversion) {
    print "Azucar $version + $solver\n";
    exit(1);
}
if (@ARGV != 1 || $help) {
    &usage();
}

my @tmp = ();
my $xml_file;

&setup(@ARGV);

my ($java_pid, $solver_pid, $result, $objective_value, $objective_offset);
my ($objective, $objective_var);
my (@objective_digits);
my ($objd_var, $objd_code, $objd_value, @objd_values);

my $time0 = time;

# $ENV{'LANG'} = "C";
# setpgrp($$, $$);

&main();
exit 0;

sub usage {
    print "Usage: $0 [options] csp_file\n";
    print "\t-h -help         : show help\n";
    print "\t-debug level     : debug option\n";
    print "\t-v -verbose      : verbose output\n";
    print "\t-vv -veryverbose : verbose output\n";
    print "\t-c -competition  : CSP Solver Competition mode\n";
    print "\t-i -incremental  : use incremental search (you need a patched SAT solver)\n";
    print "\t-o -option o1,.. : set options (e.g. -pigeon)\n";
    print "\t-max             : MAX-CSP mode\n";
    print "\t-tmp prefix      : path and prefix of temporay files\n";
    print "\t-csp file        : output CSP file name for XCSP input\n";
    print "\t-sat file        : SAT problem file name\n";
    print "\t-map file        : mapping file name\n";
    print "\t-out file        : SAT solver output file name\n";
    print "\t-java command    : java command (default: $java)\n";
    print "\t-jopt1 option    : java option for encoding\n";
    print "\t-jopt2 option    : java option for decoding\n";
    print "\t-jar file        : jar file name to be used (default: $jar)\n";
    print "\t-prof file       : java CPU profiling\n";
    print "\t-solver command  : SAT solver command (default: $solver0)\n";
    print "\t-keep            : do not erase temporary files\n";
    print "\t-memlimit MiB    : memory limit in MiB (for CSP solver competition)\n";
#    print "\t-timelimit sec   : time limit in seconds (reserved for CSP solver competition)\n";
    print "\t-encoding enc    : encoding method (oe and coe are supported)\n";
    print "\t-m m             : the number of digits (only for COE)\n";
    print "\t-b B             : uses a numeral system of base B (only for COE)\n";
    print "\t-nopropagate     : do not propagate\n";
    exit(1);
}

sub setup {
    my ($in) = @_;
    if (! -e $in) {
	die "$0: no input file $in";
    }
    if ($in =~ /\.xml(\.gz)?$/) {
	$xml_file = $in;
    } else {
	$csp_file = $in;
    }
    if (! $csp_file) {
	$csp_file = "$tmp.csp";
	push(@tmp, $csp_file);
    }
    if (! $map_file) {
	$map_file = "$tmp.map";
	push(@tmp, $map_file);
    }
    if (! $sat_file) {
	$sat_file = "$tmp.cnf";
	push(@tmp, $sat_file);
    }
    if (! $out_file) {
	$out_file = "$tmp.out";
	push(@tmp, $out_file);
    }
}

sub log {
    $_ = join(" ", @_);
    if (/ERROR/i || $verbose) {
	my $time = time - $time0;
	print "c $time\t", $_, "\n";
    }
}

sub print {
    $_ = join(" ", @_);
    if (/^c (.*)$/) {
	$_ = $1;
	if (/ERROR/i || $veryverbose) {
	    &log($_);
	}
	if (/DIGITS: (\S+) (\d+)$/) {
	    if ($1 eq $objd_var) {
		$objd_value = $2;
	    }
	}
    } elsif (/^s (.*)$/) {
	$result = $1;
	print $_, "\n";
    } elsif (/^o (.*)$/) {
	$objective_value = $1;
	print $_, "\n";
    } elsif (/^\w\b/) {
	print $_, "\n";
    } else {
	&log($_);
    }
}

sub error {
    print "c ERROR ", @_, "\n";
}

sub handler {
    &error("INTERRUPTED");
    $SIG{'INT'} = 'IGNORE';
    $SIG{'TERM'} = 'IGNORE';
    kill(-2, $$);
    $SIG{'INT'} = 'DEFAULT';
    $SIG{'TERM'} = 'DEFAULT';
    if ($java_pid) {
	kill(2, $java_pid);
	$java_pid = undef;
	while (<JAVA>) {
	    chomp;
	    if ($verbose) {
		&print($_);
	    }
	}
	close(JAVA);
    }
    if ($solver_pid) {
	kill(2, $solver_pid);
	if ($incremental) {
	    &send("exit");
	    close(Writer);
	    while (<Reader>) {
		chomp;
		if ($verbose) {
		    &print($_);
		}
	    }
	    close(Reader);
	} else {
	    while (<SOLVER>) {
		chomp;
		if ($verbose) {
		    &print($_);
		}
	    }
	    close(SOLVER);
	}
	$solver_pid = undef;
    }
    die;
}

sub java {
    my ($opt, $class, $args, $prof) = @_;
    my $cmd = "$java $opt";
    if ($prof) {
	$cmd .= " -agentlib:hprof=cpu=samples,depth=8,file=$prof";
    }
    $cmd .= " -cp '$jar' $class";
    if ($verbose) {
	$cmd .= " -v";
    }
    if ($veryverbose) {
	$cmd .= " -v";
    }
    if ($option) {
	$cmd .= " -option $option";
    }
    if ($debug) {
	$cmd .= " -debug $debug";
    }
    $cmd .= " $args";
    if ($veryverbose) {
	&log("CMD $cmd");
    }
    $java_pid = open(JAVA, "$cmd 2>&1 |") || die;
    while (<JAVA>) {
	chomp;
	&print($_);
    }
    close(JAVA);
    $java_pid = undef;
}

################################################################
# Main
################################################################
sub main {
    unlink $csp_file if $xml_file;
    unlink $map_file, $sat_file, $out_file;

    $SIG{'INT'} = \&handler;
    $SIG{'TERM'} = \&handler;
    eval {
	$result = "";
	&log("Azucar $version + $solver");
	&log("BEGIN", scalar(localtime));
	if ($veryverbose) {
	    &log("PID", $$);
	    chomp($_ = `hostname`);
	    &log("HOST", $_);
	}
	if ($xml_file) {
	    &convert($xml_file, $csp_file);
	    if ($result) {
		die;
	    }
	}
	if (-e $csp_file) {
	    &encode($csp_file, $sat_file, $map_file);
	    if (! $result) {
		&solve($sat_file, $out_file, $map_file);
	    }
	} else {
	    &error("$csp_file not found");
	}
    };
    $SIG{'INT'} = \&handler;
    $SIG{'TERM'} = \&handler;
    eval {
	if (! $result) {
	    &print("s UNKNOWN");
	}
	wait;
	my @t = times;
#	my $cpu = $t[0] + $t[2];
	my $cpu = $t[0] + $t[1] + $t[2] + $t[3];
	$_ = "(" . join(" ", @t) . ")";
	&log("CPU", $cpu, $_);
	&log("END", scalar(localtime));
	if (! $keep) {
	    foreach my $file (@tmp) {
		unlink $file;
	    }
	}
    };
}

sub convert {
    my ($xml_file, $csp_file) = @_;
    &log("CONVERTING $xml_file TO $csp_file");
    if (! -e $xml_file) {
	&error("no XML file $xml_file");
    } else {
	my $class = "jp.ac.kobe_u.cs.sugar.XML2CSP";
	&java($java_opt1, $class, "'$xml_file' '$csp_file'");
    }
}

sub encode {
    my ($csp_file, $sat_file, $map_file) = @_;
    &log("ENCODING $csp_file TO $sat_file");
    if (! -e $csp_file) {
	&error("no CSP file $csp_file");
    } else {
	my $class = "jp.ac.kobe_u.cs.sugar.SugarMain";
	my $arg = $competition ? "-competition" : "";
	if ($max_csp) {
	    $arg .= " -max";
	}
	if ($incremental) {
	    $arg .= " -incremental";
	}
	if ($encoding) {
	    $arg .= " -encoding $encoding";
	}
	if ($base) {
		$arg .= " -b $base";
	}
	if ($m) {
		$arg .= " -m $m"
	}
	if ($nopropagate) {
	    $arg .= " -nopropagate";
	}
	$arg .= " -encode '$csp_file' '$sat_file' '$map_file'";
	&java($java_opt1, $class, $arg, $prof);
    }
}

sub decode {
    my ($out_file, $map_file) = @_;
    &log("DECODING $out_file WITH $map_file");
    if (! -e $out_file) {
	&error("no output file $out_file");
	return;
    }
    if (! -e $map_file) {
	&error("no map file $map_file");
	return;
    }
    my $class = "jp.ac.kobe_u.cs.sugar.SugarMain";
    my $arg = $competition ? "-competition " : "";
    if ($encoding) {
			$arg .= "-encoding $encoding ";
    }
    $arg .= "-decode '$out_file' '$map_file'";
    &java($java_opt2, $class, $arg);
}

sub solve {
    my ($sat_file, $out_file, $map_file) = @_;
    if (! -e $sat_file) {
	&error("no SAT file $sat_file");
	return;
    }
    &load_map($map_file);
    if ($objective eq "minimize") {
	if ($incremental) {
	    &minimize_inc($sat_file, $out_file, $map_file);
	} else {
	    &minimize($sat_file, $out_file, $map_file);
	}
    } elsif ($objective eq "maximize") {
	for my $arr (reverse @objective_digits) {
	    $objd_var = $arr->[0];
	    $objd_code = $arr->[1];
	    @objd_values = @{$arr->[2]};
	    if ($incremental) {
		&maximize_inc($sat_file, $out_file, $map_file);
	    } else {
		&maximize($sat_file, $out_file, $map_file);
	    }
	}
    } else {
	&find($sat_file, $out_file, $map_file);
    }
}

sub load_map {
    my ($map_file) = @_;
    if (! -e $map_file) {
	&error("no MAP file $map_file");
	return;
    }
    my %var_map;
    $objective = undef;
    $objective_var = undef;
    $objective_offset = undef;
    @objective_digits = ();
    open(MAP, "<$map_file") || die;
    while (<MAP>) {
	chomp;
	if (/^base/) {
	    @_ = split;
	    $base = $_[1];
	} elsif (/^objective/) {
	    @_ = split;
	    ($objective, $objective_var) = ($_[1], $_[2]);
	} elsif ($objective && /^int/) {
	    @_ = split;
	    if ($objective_var) {
		if ($objective_var eq $_[1]) {
		    $objective_offset = 0;
		    push @objective_digits, $objective_var;
		    &log("OBJECTIVE $objective $objective_var");
		}
		shift(@_);
		my $var_name = shift(@_);
		my @digit_dat;
		my $offset = shift(@_);
		push @digit_dat, shift(@_);
		my @values = ();
		foreach (@_) {
		    my ($a0, $a1) = ($_, $_);
		    if (/^(-?\d+)\.\.(-?\d+)$/) {
			($a0, $a1) = ($1, $2);
		    }
		    foreach my $a ($a0 .. $a1) {
			push(@values, $a+$offset);
		    }
		}
		push @digit_dat, \@values;
		$var_map{$var_name} = \@digit_dat;
	    }
	} elsif ($objective && /^bigint/) {
	    @_ = split;
	    if ($objective_var eq $_[1]) {
		shift(@_);
		shift(@_);
		$objective_offset = shift(@_);
		push @objective_digits, @_;
		&log("OBJECTIVE $objective $objective_var");
	    }
	}
    }
    chomp($_ = <MAP>);
    close(MAP);
    @objective_digits = map { my @ar = ($_, $var_map{$_}->[0], $var_map{$_}->[1]); \@ar } @objective_digits;
}

sub find {
    my ($sat_file, $out_file, $map_file) = @_;
    &sat($sat_file, $out_file);
    &decode($out_file, $map_file);
}

sub minimize {
    my ($sat_file, $out_file, $map_file) = @_;
    my $arr = pop @objective_digits;
    $objd_var = $arr->[0];
    $objd_code = $arr->[1];
    @objd_values = @{$arr->[2]};
    my $digit_name = $objective_var."[".scalar(@objective_digits)."]";
    open(SAT, "+<", $sat_file) || die;
    seek(SAT, 0, 0);
    my $line = <SAT>;
    my ($p_, $cnf_, $nvar, $ncls) = split /\s+/, $line;
    $ncls++;
    my $newstr = "p cnf $nvar $ncls";
    my $width = 64-length($newstr);
    seek(SAT, 0, 0);
    print SAT $newstr, " " x $width;
    close(SAT);
    my $sat_size = (stat($sat_file))[7];
    my $i0 = 0;
    my $i1 = scalar(@objd_values);
    while ($i0 < $i1) {
	my $i = int(($i0+$i1) / 2);
	my $value = $objd_values[$i];
	my $code = $objd_code + $i;
	open(SAT, "+<", $sat_file) || die;
	seek(SAT, $sat_size, 0);
	if ($i < @objd_values - 1) {
	    print SAT "$code 0\n         ";
	} else {
	    print SAT "1 -1 0\n          ";
	}
	close(SAT);
	&log("OBJECTIVE BOUND:",
	     $objd_values[$i0], "<=", $digit_name,
	     "<=", $objd_values[$i1]);
	&log("SEARCHING: $digit_name <= $value");
	&sat($sat_file, $out_file);
	open(IN, "<$out_file") || die;
	do {
	    chomp($_ = <IN>);
	} while (/^c/ || /^\s*$/);
	close(IN);
	if (/^(s\s+)?SAT/) {
	    &log("FOUND: $digit_name <= $value");
	    if (! $found) {
		&print("s SATISFIABLE");
	    }
	    $found = 1;
	    $i1 = $i;
	    &decode($out_file, $map_file);
	    while ($i1 > 0 && $objd_value < $value) {
		$i1--;
		$value = $objd_values[$i1];
	    }
	} elsif (/^(s\s+)?UNSAT/) {
	    &log("NOT FOUND: $digit_name <= $value");
	    $i0 = $i + 1;
	} else {
	    &error("unknown output $_ in $out_file");
	    return;
	}
    }
    if ($found) {
	open(SAT, "+<", $sat_file) || die;
	seek(SAT, $sat_size, 0);
	if ($i0 < @objd_values - 1) {
	    my $code = $objd_code+$i0;
	    print SAT "$code 0\n         ";
	} else {
	    print SAT "1 -1 0\n          ";
	}
	close(SAT);
	if (scalar(@objective_digits) == 0) {
	    &log("OBJECTIVE $objective_var $objective_value");
	    &print("s OPTIMUM FOUND");
	} else {
	    @_ = ($sat_file, $out_file, $map_file);
	    goto &minimize;
	}
    } else {
	&print("s UNSATISFIABLE");
    }
}

sub maximize {
    my ($sat_file, $out_file, $map_file) = @_;
    my $arr = pop @objective_digits;
    $objd_var = $arr->[0];
    $objd_code = $arr->[1];
    @objd_values = @{$arr->[2]};
    my $digit_name = $objective_var."[".scalar(@objective_digits)."]";
    open(SAT, "+<", $sat_file) || die;
    seek(SAT, 0, 0);
    my $line = <SAT>;
    my ($p_, $cnf_, $nvar, $ncls) = split /\s+/, $line;
    $ncls++;
    my $newstr = "p cnf $nvar $ncls";
    my $width = 64-length($newstr);
    seek(SAT, 0, 0);
    print SAT $newstr, " " x $width;
    close(SAT);
    my $sat_size = (stat($sat_file))[7];
    my $i0 = -1;
    my $i1 = scalar(@objd_values) - 1;
    while ($i0 < $i1) {
	my $i = int(($i0+$i1) / 2);
	my $value = $objd_values[$i];
	my $code = $objd_code + $i;
	open(SAT, "+<", $sat_file) || die;
	seek(SAT, $sat_size, 0);
	if ($i >= 0) {
	    print SAT "-$code 0\n         ";
	} else {
	    print SAT "1 -1 0\n           ";
	}
	close(SAT);
	&log("OBJECTIVE BOUND:", 
	     $objd_values[$i0], "<=", $digit_name,
	     "<=", $objd_values[$i1]);
	&log("SEARCHING: $digit_name > $value");
	&sat($sat_file, $out_file);
	open(IN, "<$out_file") || die;
	chomp($_ = <IN>);
	close(IN);
	if (/^(s\s+)?SAT/) {
	    &log("FOUND: $digit_name > $value");
	    if (! $found) {
		&print("s SATISFIABLE");
	    }
	    $found = 1;
	    $i0 = $i;
	    &decode($out_file, $map_file);
	    while ($i0 < @objd_values && $objd_value > $value) {
		$i0++;
		$value = $objd_values[$i0];
	    }
	} elsif (/^(s\s+)?UNSAT/) {
	    &log("NOT FOUND: $objd_var > $value");
	    $i1 = $i;
	} else {
	    &error("unknown output $_ in $out_file");
	    return;
	}
    }
    if ($found) {
	open(SAT, "+<", $sat_file) || die;
	seek(SAT, $sat_size, 0);
	if ($i0 >= 0) {
	    my $code = $objd_code+$i0;
	    print SAT "-$code 0\n         ";
	}
	close(SAT);
	if (scalar(@objective_digits) == 0) {
	    &log("OBJECTIVE $objective_var $objective_value");
	    &print("s OPTIMUM FOUND");
	} else {
	    @_ = ($sat_file, $out_file, $map_file);
	    goto &maximize;
	}
    } else {
	&print("s UNSATISFIABLE");
    }
}

sub sat {
    my ($sat_file, $out_file) = @_;
    &log("SOLVING $sat_file");
    if (! -e $sat_file) {
	&error("no SAT file $sat_file");
	return;
    }
    unlink $out_file;
    my $cmd = "$solver '$sat_file'";
    if ($solver =~ /minisat/) {
	$cmd = "$solver '$sat_file' '$out_file'";
	$out_file = undef;
    } elsif ($solver =~ /picosat/) {
	$cmd = "$solver '$sat_file' -o '$out_file'";
	$out_file = undef;
    } elsif ($solver =~ /rsat/) {
	$cmd = "$solver '$sat_file' -r '$out_file'";
	$out_file = undef;
    }
    if ($veryverbose) {
	&log("CMD $cmd");
    }
    $solver_pid = open(SOLVER, "$cmd 2>&1 |") || die;
    if ($out_file) {
	open(OUT, ">$out_file") || die;
	while (<SOLVER>) {
	    chomp;
	    print OUT "$_\n";
	    if ($veryverbose && ! /^v/) {
		&log($_);
	    }
	}
	close(OUT);
    } else {
	while (<SOLVER>) {
	    chomp;
	    if ($veryverbose && ! /^v/) {
		&log($_);
	    }
	}
    }
    close(SOLVER);
    $solver_pid = undef;
}

sub minimize_inc {
    my ($sat_file, $out_file, $map_file) = @_;
    &sat_inc_open($sat_file, $out_file);
    &minimize_inc1($sat_file, $out_file, $map_file);
    &sat_inc_close();
}

sub minimize_inc1 {
    my ($sat_file, $out_file, $map_file) = @_;
    my $arr = pop @objective_digits;
    $objd_var = $arr->[0];
    $objd_code = $arr->[1];
    @objd_values = @{$arr->[2]};
    my $digit_name = $objective_var."[".scalar(@objective_digits)."]";
    my $i0 = 0;
    my $i1 = scalar(@objd_values);
    while ($i0 < $i1) {
	my $i = int(($i0+$i1) / 2);
	my $value = $objd_values[$i];
	my $code = $objd_code + $i;
	&log("OBJECTIVE BOUND:",
	     $objd_values[$i0], "<=", $digit_name,
	     "<=", $objd_values[$i1]);
	&log("SEARCHING: $digit_name <= $value");
	unlink $out_file;
	if ($i < @objd_values - 1) {
	    &send("solve $code 0");
	} else {
	    &send("solve 0");
	}
	&recv();
	open(IN, "<$out_file") || die;
	chomp($_ = <IN>);
	close(IN);
	if (/^(s\s+)?SAT/) {
	    &log("FOUND: $objd_var <= $value");
	    if (! $found) {
		&print("s SATISFIABLE");
	    }
	    $found = 1;
	    $i1 = $i;
	    &decode($out_file, $map_file);
	    while ($i1 > 0 && $objd_value < $value) {
		$i1--;
		$value = $objd_values[$i1];
	    }
	    $code = $objd_code+$i1;
	    &send("add $code 0");
	    &recv();
	} elsif (/^(s\s+)?UNSAT/) {
	    &log("NOT FOUND: $objd_var <= $value");
	    &send("add -$code 0");
	    &recv();
	    $i0 = $i + 1;
	} else {
	    &error("unknown output $_ in $out_file");
	    &send("exit");
	    return;
	}
    }
    &send("exit");
    if ($found) {
	if (scalar(@objective_digits) == 0) {
	    &log("OBJECTIVE $objective_var $objective_value");
	    &print("s OPTIMUM FOUND");
	} else {
	    @_ = ($sat_file, $out_file, $map_file);
	    goto &minimize_inc1;
	}
    } else {
	&print("s UNSATISFIABLE");
    }
}

sub maximize_inc {
    my ($sat_file, $out_file, $map_file) = @_;
    &sat_inc_open($sat_file, $out_file);
    &maximize_inc1($sat_file, $out_file, $map_file);
    &sat_inc_close();
}

sub maximize_inc1 {
    my ($sat_file, $out_file, $map_file) = @_;
    my $arr = pop @objective_digits;
    $objd_var = $arr->[0];
    $objd_code = $arr->[1];
    @objd_values = @{$arr->[2]};
    my $digit_name = $objective_var."[".scalar(@objective_digits)."]";
    my $i0 = -1;
    my $i1 = scalar(@objd_values) - 1;
    while ($i0 < $i1) {
	my $i = int(($i0+$i1) / 2);
	my $value = $objd_values[$i];
	my $code = $objd_code + $i;
	&log("OBJECTIVE BOUND:",
	     $objd_values[$i0], "<=", $digit_name,
	     "<=", $objd_values[$i1]);
	&log("SEARCHING: $digit_name > $value");
	unlink $out_file;
	if ($i >= 0) {
	    &send("solve -$code 0");
	} else {
	    &send("solve 0");
	}
	&recv();
	open(IN, "<$out_file") || die;
	chomp($_ = <IN>);
	close(IN);
	if (/^(s\s+)?SAT/) {
	    &log("FOUND: $objd_var > $value");
	    if (! $found) {
		&print("s SATISFIABLE");
	    }
	    $found = 1;
	    $i0 = $i;
	    &decode($out_file, $map_file);
	    while ($i0 < @objd_values && $objd_value > $value) {
		$i0++;
		$value = $objd_values[$i0];
	    }
	    $code = $objd_code+$i1;
	    &send("add -$code 0");
	    &recv();
	} elsif (/^(s\s+)?UNSAT/) {
	    &log("NOT FOUND: $objd_var > $value");
	    &send("add $code 0");
	    &recv();
	    $i1 = $i;
	} else {
	    &error("unknown output $_ in $out_file");
	    &send("exit");
	    return;
	}
    }
    &send("exit");
    if ($found) {
	if (scalar(@objective_digits) == 0) {
	    &log("OBJECTIVE $objective_var $objective_value");
	    &print("s OPTIMUM FOUND");
	} else {
	    @_ = ($sat_file, $out_file, $map_file);
	    goto &maximize_inc1;
	}
    } else {
	&print("s UNSATISFIABLE");
    }
}

sub sat_inc_open {
    my ($sat_file, $out_file) = @_;
    &log("SOLVING $sat_file");
    if (! -e $sat_file) {
	&error("no SAT file $sat_file");
	return;
    }
    my $cmd = $solver;
    if ($solverlimit) {
	$cmd .= sprintf(" -mem-limit=%d", $solverlimit);
    }
    $cmd .= " -incremental '$sat_file' '$out_file'";
    if ($veryverbose) {
	&log("CMD $cmd");
    }
    $solver_pid = open2(*Reader, *Writer, "$cmd 2>&1") || die;
    my $old = select; select(Writer); $| = 1; select($old);
    &recv();
}

sub sat_inc_close {
    close(Reader);
    close(Writer);
    $solver_pid = undef;
}

sub send {
    my ($msg) = @_;
    print Writer $msg."\n";
}

sub recv {
    while (<Reader>) {
	chomp;
	if ($_ eq "OK") {
	    return;
	}
	&log($_);
    }
    die;
}

